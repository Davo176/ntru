2d1
< #include "cbd.h"
3a3,11
> #include "poly_r2_inv.h"
> 
> extern void poly_Rq_mul(poly *r, const poly *a, const poly *b);
> extern void poly_S3_mul(poly *r, const poly *a, const poly *b);
> extern void poly_Rq_mul_xm1(poly *r, const poly *a);
> extern void poly_S3_inv(poly *r, const poly *a);
> extern void poly_Rq_to_S3(poly *r, const poly *a);
> extern void poly_S3_to_Rq(poly *r, const poly *a);
> extern void cbdS3(poly *r, const uint32_t *buf);
223,439d230
< void poly_Rq_mul(poly *r, const poly *a, const poly *b)
< {
<   int k,i;
< 
<   for(k=0; k<NTRU_N; k++)
<   {
<     r->coeffs[k] = 0;
<     for(i=1; i<NTRU_N-k; i++)
<       r->coeffs[k] += a->coeffs[k+i] * b->coeffs[NTRU_N-i];
<     for(i=0; i<k+1; i++)
<       r->coeffs[k] += a->coeffs[k-i] * b->coeffs[i];
<     r->coeffs[k] = MODQ(r->coeffs[k]);
<   }
< }
< 
< void poly_S3_mul(poly *r, const poly *a, const poly *b)
< {
<   int k,i;
< 
<   for(k=0; k<NTRU_N; k++)
<   {
<     r->coeffs[k] = 0;
<     for(i=1; i<NTRU_N-k; i++)
<       r->coeffs[k] += a->coeffs[k+i] * b->coeffs[NTRU_N-i];
<     for(i=0; i<k+1; i++)
<       r->coeffs[k] += a->coeffs[k-i] * b->coeffs[i];
<   }
<   for(k=0; k<NTRU_N; k++)
<     r->coeffs[k] = mod3(r->coeffs[k] + 2*r->coeffs[NTRU_N-1]);
< }
< 
< void poly_Rq_mul_xm1(poly *r, const poly *a)
< {
<   int i;
<   uint16_t last_coeff = a->coeffs[NTRU_N-1];
< 
<   for (i = NTRU_N - 1; i > 0; i--) {
<     r->coeffs[i] = MODQ(a->coeffs[i-1] + (NTRU_Q - a->coeffs[i]));
<   }
<   r->coeffs[0] = MODQ(last_coeff + (NTRU_Q - a->coeffs[0]));
< }
< 
< void poly_S3_to_Rq(poly *r, const poly *a)
< {
<   /* NOTE: Assumes input is in {0,1,2}^N */
<   /*       Produces output in [0,Q-1]^N */
<   int i;
<   poly b;
<   uint16_t t, zj;
< 
<   /* Define z by <z*x^i, x-1> = delta_{i,0} mod 3:      */
<   /*   t      = -1/N mod p = -N mod 3                   */
<   /*   z[0]   = 2 - t mod 3                             */
<   /*   z[1]   = 0 mod 3                                 */
<   /*   z[j]   = z[j-1] + t mod 3                        */
<   /* We'll compute b = a/(x-1) mod (3, Phi) using       */
<   /*   b[0] = <z, a>, b[1] = <z*x,a>, b[2] = <z*x^2,a>  */
<   /*   b[i] = b[i-3] - (a[i] + a[i-1] + a[i-2])         */
<   t = 3 - (NTRU_N % 3);
<   b.coeffs[0] = a->coeffs[0] * (2-t) + a->coeffs[1] * 0 + a->coeffs[2] * t;
<   b.coeffs[1] = a->coeffs[1] * (2-t) + a->coeffs[2] * 0;
<   b.coeffs[2] = a->coeffs[2] * (2-t);
< 
<   zj = 0; /* z[1] */
<   for(i=3; i<NTRU_N; i++)
<   {
<     b.coeffs[0] += a->coeffs[i] * (zj + 2*t);
<     b.coeffs[1] += a->coeffs[i] * (zj + t);
<     b.coeffs[2] += a->coeffs[i] * zj;
<     zj = (zj + t) % 3;
<   }
<   b.coeffs[1] += a->coeffs[0] * (zj + t);
<   b.coeffs[2] += a->coeffs[0] * zj;
<   b.coeffs[2] += a->coeffs[1] * (zj + t);
< 
<   b.coeffs[0] = b.coeffs[0];
<   b.coeffs[1] = b.coeffs[1];
<   b.coeffs[2] = b.coeffs[2];
<   for(i=3; i<NTRU_N; i++)
<     b.coeffs[i] =
<       b.coeffs[i-3] + 2*(a->coeffs[i] + a->coeffs[i-1] + a->coeffs[i-2]);
< 
<   /* Finish reduction mod Phi by subtracting Phi * b[N-1] */
<   for(i=0; i<NTRU_N; i++)
<     b.coeffs[i] = mod3(b.coeffs[i] + 2*b.coeffs[NTRU_N-1]);
< 
<   /* Lift to an element of Z[x]/(q, x^n - 1) */
<   for(i=0; i<NTRU_N; i++)
<     b.coeffs[i] = ZP_TO_ZQ(b.coeffs[i]);
< 
<   /* Multiply by (x-1) */
<   poly_Rq_mul_xm1(r, &b);
< }
< 
< void poly_Rq_to_S3(poly *r, const poly *a)
< {
<   /* NOTE: Assumes input is in [0,Q-1]^N */
<   /*       Produces output in {0,1,2}^N */
<   int i;
< 
<   /* Center coeffs around 3Q: [0, Q-1] -> [3Q - Q/2, 3Q + Q/2) */
<   for(i=0; i<NTRU_N; i++)
<   {
<     r->coeffs[i] = ((a->coeffs[i] >> (NTRU_LOGQ-1)) ^ 3) << NTRU_LOGQ;
<     r->coeffs[i] += a->coeffs[i];
<   }
<   /* Reduce mod (3, Phi) */
<   r->coeffs[NTRU_N-1] = mod3(r->coeffs[NTRU_N-1]);
<   for(i=0; i<NTRU_N; i++)
<     r->coeffs[i] = mod3(r->coeffs[i] + 2*r->coeffs[NTRU_N-1]);
< }
< 
< #define POLY_R2_ADD(I,A,B,S)        \
<    for(I=0; I<NTRU_N; I++)        \
<    { A.coeffs[I] ^= B.coeffs[I] * S;  }
< 
< #define POLY_S3_FMADD(I,A,B,S)                    \
<    for(I=0; I<NTRU_N; I++)                            \
<    { A.coeffs[I] = mod3(A.coeffs[I] + S * B.coeffs[I]); }
< 
< static void cswappoly(poly *a, poly *b, int swap)
< {
<   int i;
<   uint16_t t;
<   swap = -swap;
<   for(i=0;i<NTRU_N;i++)
<   {
<     t = (a->coeffs[i] ^ b->coeffs[i]) & swap;
<     a->coeffs[i] ^= t;
<     b->coeffs[i] ^= t;
<   }
< }
< 
< static inline void poly_divx(poly *a, int s)
< {
<   int i;
< 
<   for(i=1; i<NTRU_N; i++)
<     a->coeffs[i-1] = (s * a->coeffs[i]) | (!s * a->coeffs[i-1]);
<   a->coeffs[NTRU_N-1] = (!s * a->coeffs[NTRU_N-1]);
< }
< 
< static inline void poly_mulx(poly *a, int s)
< {
<   int i;
< 
<   for(i=1; i<NTRU_N; i++)
<     a->coeffs[NTRU_N-i] = (s * a->coeffs[NTRU_N-i-1]) | (!s * a->coeffs[NTRU_N-i]);
<   a->coeffs[0] = (!s * a->coeffs[0]);
< }
< 
< static void poly_R2_inv(poly *r, const poly *a)
< {
<   /* Schroeppel--Orman--O'Malley--Spatscheck
<    * "Almost Inverse" algorithm as described
<    * by Siverman in NTRU Tech Report #14 */
<   // with several modifications to make it run in constant-time
<   int i, j;
<   int k = 0;
<   int degf = NTRU_N-1;
<   int degg = NTRU_N-1;
<   int sign, t, swap;
<   int done = 0;
<   poly b, f, g;
<   poly *c = r; // save some stack space
< 
<   /* b(X) := 1 */
<   for(i=1; i<NTRU_N; i++)
<     b.coeffs[i] = 0;
<   b.coeffs[0] = 1;
< 
<   /* c(X) := 0 */
<   for(i=0; i<NTRU_N; i++)
<     c->coeffs[i] = 0;
< 
<   /* f(X) := a(X) */
<   for(i=0; i<NTRU_N; i++)
<   {
<     f.coeffs[i] = a->coeffs[i] & 1;
<     if(f.coeffs[i])
<       degf = i;
<   }
< 
<   /* g(X) := 1 + X + X^2 + ... + X^{N-1} */
<   for(i=0; i<NTRU_N; i++)
<     g.coeffs[i] = 1;
< 
<   for(j=0;j<2*(NTRU_N-1)-1;j++)
<   {
<     sign = f.coeffs[0];
<     swap = sign && !done && (degf < degg);
< 
<     cswappoly(&f, &g, swap);
<     cswappoly(&b, c, swap);
<     t = (degf ^ degg) & (-swap);
<     degf ^= t;
<     degg ^= t;
< 
<     POLY_R2_ADD(i, f, g, sign*(!done));
<     POLY_R2_ADD(i, b, (*c), sign*(!done));
< 
<     poly_divx(&f, !done);
<     poly_mulx(c, !done);
<     degf -= !done;
<     k += !done;
< 
<     done = (degf == 0);
<   }
< 
<   k = k - NTRU_N*(k >= NTRU_N);
<     /* Return X^{N-k} * b(X) */
<   for(i=k; i<NTRU_N; i++)
<     r->coeffs[i-k] = b.coeffs[i];
<   for(i=0; i<k; i++)
<     r->coeffs[NTRU_N-k+i] = b.coeffs[i];
< }
< 
480,542d270
< }
< 
< void poly_S3_inv(poly *r, const poly *a)
< {
<   /* Schroeppel--Orman--O'Malley--Spatscheck
<    * "Almost Inverse" algorithm as described
<    * by Siverman in NTRU Tech Report #14 */
<   // with several modifications to make it run in constant-time
<   int i, j;
<   int k = 0;
<   int degf = NTRU_N-1;
<   int degg = NTRU_N-1;
<   int sign, fsign = 0, t, swap;
<   int done = 0;
<   poly b, c, f, g;
< 
<   /* b(X) := 1 */
<   for(i=1; i<NTRU_N; i++)
<     b.coeffs[i] = 0;
<   b.coeffs[0] = 1;
< 
<   /* c(X) := 0 */
<   for(i=0; i<NTRU_N; i++)
<     c.coeffs[i] = 0;
< 
<   /* f(X) := a(X) */
<   for(i=0; i<NTRU_N; i++)
<     f.coeffs[i] = a->coeffs[i];
< 
<   /* g(X) := 1 + X + X^2 + ... + X^{N-1} */
<   for(i=0; i<NTRU_N; i++)
<     g.coeffs[i] = 1;
< 
<   for(j=0; j<2*(NTRU_N-1)-1; j++)
<   {
<     sign = mod3(2 * g.coeffs[0] * f.coeffs[0]);
<     swap = sign && !done && (degf < degg);
< 
<     cswappoly(&f, &g, swap);
<     cswappoly(&b, &c, swap);
<     t = (degf ^ degg) & (-swap);
<     degf ^= t;
<     degg ^= t;
< 
<     POLY_S3_FMADD(i, f, g, sign*(!done));
<     POLY_S3_FMADD(i, b, c, sign*(!done));
< 
<     poly_divx(&f, !done);
<     poly_mulx(&c, !done);
<     degf -= !done;
<     k += !done;
< 
<     done = (degf == 0);
<   }
< 
<   fsign = f.coeffs[0];
<   k = k - NTRU_N*(k >= NTRU_N);
< 
<   /* Return X^{N-k} * b(X) */
<   for(i=k; i<NTRU_N; i++)
<     r->coeffs[i-k] = mod3(fsign*b.coeffs[i]);
<   for(i=0; i<k; i++)
<     r->coeffs[NTRU_N-k+i] = mod3(fsign*b.coeffs[i]);
